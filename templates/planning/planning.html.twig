

<div class="mt-8 flow-root">
    <div class="-mx-4 -my-2 overflow-x-auto lg:overflow-visible sm:-mx-6 lg:-mx-8">
        <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
            <div class="relative">

                <table class="relative planning text-sm">

                    <thead>
                        <tr class="divide-gray-200 divide-x sticky z-10 top-14 bg-gray-100">
                            <th scope="col" class="!text-right font-normal w-1/6 pr-3 py-1">
                                <div class="flex justify-between items-center">
                                    {# Sélecteur d'équipes à afficher #}
                                    <div id="equipeSelecteur" class="relative group">
                                        <a href='#' title="Filtrer les équipes de pose" class="flex gap-1 items-center text-xs uppercase text-gray-600 px-1 bg-white/50 group-hover:bg-white group-hover:text-teal-500 rounded border border-gray-300">Filtrer
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3 h-3">
                                              <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
                                            </svg>
                                        </a>
                                        <div class="hidden absolute top-full group-hover:flex flex-col bg-white p-2 rounded border border-gray-300 items-start text-left min-w-40 space-y-2">
                                        {% for e in equipes %}
                                            <label><input type="checkbox" value="{{ e }}" class="mr-2">{{ e ?? "sans équipe" }}</label>
                                        {% endfor %}
                                        </div>
                                    </div>
                                    <div>
                                        Heures<br><span class="text-xs">Passées / Planifiées</span>
                                    </div>
                                </div>
                            </th>
                            {% for date in dates %}
                                <th scope="col" class="bg-white border-b border-gray-300 w-[14.3%]">
                                    {{ date|format_datetime(pattern="eeee dd/MM", locale="fr") }}
                                </th>
                            {% endfor %}
                        </tr>
                    </thead>

                    <tbody class="divide divide-gray-200 divide-y">
                    {% set precedente_equipe = '' %}
                    {% for poseur in poseurs %}
                        <tr class="divide-gray-200 divide-x odd:bg-gray-600/5" data-equipe="{{ poseur.equipe }}">
                            <td class="flex justify-between items-center gap-2 font-medium !text-gray-900 text-sm {{ poseur.equipe != precedente_equipe ? 'border-t border-gray-400'}}">
                                <div>
                                    <span class="inline-block text-xs uppercase text-white rounded px-1 mr-1 {{ poseur.equipe == 'atelier' ? 'bg-sky-500' : 'bg-teal-500' }}">
                                        {{ poseur.equipe }}
                                    </span>
                                    <br>{{ poseur }}
                                </div>
                                <div class="font-medium !text-gray-600 text-xs">
                                    <span title="{{ totalHeuresPasseesPoseurs[poseur.id] }}h passée">
                                        {{ totalHeuresPasseesPoseurs[poseur.id] }}h
                                    </span>
                                    {{ totalHeuresPasseesPoseurs[poseur.id] > 39 ? '⚠️' }}
                                    /
                                    <span title="{{ totalHeuresPlanifieesPoseurs[poseur.id] }}h planifiées">
                                        {{ totalHeuresPlanifieesPoseurs[poseur.id] }}h
                                    </span>
                                    {{ totalHeuresPlanifieesPoseurs[poseur.id] > 39 ? '⚠️' }}
                                </div>
                            </td>
                            {% for d,date in dates %}
                                <td class="bg-white/70 {{ poseur.equipe != precedente_equipe ? '!border-t !border-t-gray-400' }}">
                                    <div class="w-full min-h-full flex flex-col gap-2 justify-start">
                                        {% for intervention in interventions[poseur.id][d]??[] %}
                                            <div class="group relative z-0 flex justify-between gap-2 bg-gray-100 border border-gray-200 text-gray-700 p-1 rounded transition-all hover:text-white {% if intervention.type == 'atelier' %}hover:bg-sky-500 hover:border-sky-500{% elseif intervention.type == 'pose' %}hover:bg-teal-500 hover:border-teal-500{% else %}hover:bg-violet-500 hover:border-violet-500{% endif %}"
                                                 {% if intervention.parent %} data-group="{{ intervention.parent.id }} {% endif %}">

                                                {# Affichage intervention #}
                                                <button class="showInterventionButton text-left"
                                                   data-disabled="{{ intervention.valide ? 1 : 0 }}"
                                                   data-intervention="{{ intervention.id }}">
                                                    {% if intervention.activite == 'chantier' %}
                                                        <span class="{% if intervention.type == 'atelier' %}text-sky-500{% elseif intervention.type == 'pose' %}text-teal-500{% else %}text-violet-500{% endif %} group-hover:text-white transition-all">
                                                            {{ intervention.chantier }}
                                                        - {{ intervention.type }}</span>
                                                    {% else %}
                                                        <span class="{% if intervention.type == 'atelier' %}text-sky-500{% elseif intervention.type == 'pose' %}text-teal-500{% else %}text-violet-500{% endif %} group-hover:text-white transition-all">
                                                            {{ intervention.activite }}</span>
                                                    {% endif %}
                                                    - {{ intervention.heuresPassees }}h&nbsp;/&nbsp;{{ intervention.heuresPlanifiees }}h
                                                    {% if intervention.heuresPassees != intervention.heuresPlanifiees %}
                                                        <span class="absolute -top-2 -right-2 w-5 h-5 flex justify-center items-center rounded-full bg-white text-xs border border-gray-200 {% if intervention.type == 'atelier' %}text-sky-500{% elseif intervention.type == 'pose' %}text-teal-500{% else %}text-violet-500{% endif %}">
                                                            ⚠️</span>
                                                    {% endif %}
                                                </button>

                                                {# Validation #}
                                                <input type="checkbox"
                                                       name="validerIntervention"
                                                       class="rounded"
                                                       {{ not is_granted('ROLE_PLANNING_EDIT') ? 'disabled'}}
                                                       data-intervention="{{ intervention.id }}"
                                                       {{ intervention.valide ? 'checked' }}>

                                                {# Remplissage auto des heures passées #}
                                                {% if intervention.heuresPassees == 0 and not intervention.valide %}
                                                <form action="{{ path('planning_edit_heures', {id: intervention.id}) }}" method="post">
                                                <button name="intervention_heures[heuresPassees]"
                                                        value="{{ intervention.heuresPlanifiees }}"
                                                        title="Remplissage auto des heures passées"
                                                        {{ intervention.heuresPassees > 0 ? 'disabled' }}>
                                                    Heures auto
                                                </button>
                                                </form>
                                                {% endif %}

                                            </div>
                                        {% endfor %}

                                        <button data-date="{{ date|format_datetime(pattern="yyyy-MM-dd") }}"
                                                data-disabled="{{ date.valide }}"
                                                data-poseur="{{ poseur.id }}"
                                                class="addInterventionButton rounded px-2 py-1 border border-dashed border-gray-200 text-gray-400 transition-all hover:border-gray-400 hover:text-teal-500">
                                            + Ajouter
                                        </button>
                                    </div>
                                </td>
                            {% endfor %}
                        </tr>
                        {% set precedente_equipe = poseur.equipe %}
                    {% endfor %}

                    </tbody>
                </table>

            </div>
        </div>
    </div>
</div>


<dialog onclick="event.target===this && this.close()" class="formWrapper w-full max-w-4xl rounded-3xl shadow-xl">
    {# planning/edit.html.twig #}
</dialog>

<script>
    const modal = document.querySelector('dialog');
    const addButtons = document.querySelectorAll('.addInterventionButton:not([data-disabled="true"])');
    const showButtons = document.querySelectorAll('.showInterventionButton');
    const validInputs = document.querySelectorAll('[name="validerIntervention"]');
    const HeuresAutoButtons = document.querySelectorAll('[name="remplirHeuresPassees"]');

    addButtons.forEach(button => {
        button.addEventListener('click', () => {
            const date = button.dataset.date;
            const poseur = button.dataset.poseur;
            fetch('{{ path('planning_new') }}' + '?date='+date+'&poseur='+poseur)
                .then(response => response.text())
                .then(html => modal.innerHTML = html)
                .then(() => modal.showModal())
                .then(() => gestionSelectChantier())
                .then(() => gestionCheckboxEquipe())
        });
    });

    showButtons.forEach(button => {
        button.addEventListener('click', () => {
            let id = button.dataset.intervention;
            let disabled = button.dataset.disabled === '1' || button.dataset.disabled === 'true'; // 🤮 JS
            fetch('{{ path('planning_edit', {id:'XX'}) }}'.replace('XX', id))
                .then(response => response.text())
                .then(html => modal.innerHTML = html)
                .then(() => modal.showModal())
                .then(() => toto())
                .then(() => {
                    if (disabled) {
                        modal.querySelector('form').querySelectorAll('input,select,textarea,button').forEach(input => input.disabled = true);
                        modal.querySelector('form').querySelectorAll('button').forEach(input => input.style.display = 'none');
                    }
                })
        });
    });

    validInputs.forEach(input => {
        input.addEventListener('change', () => {
            const id = input.dataset.intervention
            const form = new FormData()
            form.append('valider', input.checked)
            // change cursor to waiting
            document.body.style.cursor = 'wait'
            fetch('{{ path('planning_valider', {id:'XX'}) }}'.replace('XX', id), {method: 'POST', body: form})
                .then(() => {
                        const button = document.querySelector('.showInterventionButton[data-intervention="'+id+'"]')
                        button.dataset.disabled = input.checked
                        // change cursor back to normal
                        document.body.style.cursor = 'default'
                    })
        })
    })

    {#HeuresAutoButtons.forEach(button => {#}
    {#    button.addEventListener('click', () => {#}
    {#        if (button.dataset.disabled) return#}
    {#        const id = button.dataset.intervention#}
    {#        const heures = button.dataset.heures#}
    {#        const form = new FormData()#}
    {#        form.append('intervention_heures[heuresPassees]', heures)#}
    {#        // change cursor to waiting#}
    {#        document.body.style.cursor = 'wait'#}
    {#        fetch('{{ path('planning_edit_heures', {id:'XX'}) }}'.replace('XX', id), {method: 'POST', body: form})#}
    {#            .then(() => {#}
    {#                    // change cursor back to normal#}
    {#                    document.body.style.cursor = 'default'#}
    {#                    //window.location.reload();#}
    {#            })#}
    {#    })#}
    {#})#}


    function gestionSelectChantier() {
        const activite = modal.querySelector('#intervention_activite')
        //const poseur = modal.querySelector('#intervention_poseur')
        const chantier = modal.querySelector('#intervention_chantier')
        const types = modal.querySelectorAll('[name="intervention[type]"]')
        chantier.tomselect.on ('change', () => chantier.tomselect.blur())
        //poseur.tomselect.on ('change', () => poseur.tomselect.blur())
        activite.addEventListener('change', function () {
            if (activite.value === 'chantier') {
                chantier.disabled = false
                types.forEach(type => {
                    type.disabled = false
                    type.required = true
                })
            } else {
                chantier.tomselect.clear()
                chantier.disabled = true
                types.forEach(type => {
                    type.checked = false
                    type.disabled = true
                    type.required = false
                })
            }
        })
        activite.dispatchEvent(new Event('change'))
    }

    /**
     * Cochage de toute l'équipe
     */
    function gestionCheckboxEquipe() {
        document.querySelector('#dupliquer_poseurs_equipe')
            .addEventListener('change', (el) => {
                document.querySelector('#dupliquer_poseurs_all').checked = false
                document.querySelectorAll(
                    'input[name^="dupliquer_poseurs"][data-checkable]'
                ).forEach((e) => {
                    e.checked = el.target.checked
                    e.disabled = el.target.checked
                })
            }
        )
        document.querySelector('#dupliquer_poseurs_all')
            .addEventListener('change', (el) => {
                document.querySelector('#dupliquer_poseurs_equipe').checked = false
                document.querySelectorAll(
                    'input[name^="dupliquer_poseurs"][data-checkable]'
                ).forEach((e) => {
                    e.checked = el.target.checked
                    e.disabled = el.target.checked
                })
            }
        )
    }
</script>

<script>
    /**
     * Sélecteur d'équipes
     *
     * Sauvegarde l'état des checkboxes dans le localStorage
     *
     * A chaque changement de checkbox, on sauvegarde l'état dans le localStorage
     * et on affiche/masque les lignes correspondantes
     *
     * Au chargement de la page, on applique l'état sauvegardé
     */
    const equipes = document.querySelectorAll('#equipeSelecteur input')
    const lignes = document.querySelectorAll('.planning tr[data-equipe]')
    const equipeStorage = localStorage.getItem('equipeSelecteur')

    equipes.forEach(checkbox => {
        checkbox.addEventListener('change', () => {
            applyState()
            saveState()
        })
    })

    document.addEventListener('DOMContentLoaded', () => {
        loadState()
        applyState()
        saveState()
    })

    function loadState() {
        if (equipeStorage) {
            // apply saved state
            const equipeSelecteur = JSON.parse(equipeStorage)
            equipes.forEach(checkbox => {
                checkbox.checked = equipeSelecteur.includes(checkbox.value)
            })
        } else {
            // apply default state
            equipes.forEach(checkbox => {
                checkbox.checked = true
            })
        }
    }

    function saveState() {
        // save state
        localStorage.setItem(
            'equipeSelecteur',
            JSON.stringify(Array.from(equipes).filter(checkbox => checkbox.checked).map(checkbox => checkbox.value))
        )
    }

    function applyState() {
        // show/hide rows
        equipes.forEach(checkbox => {
            lignes.forEach(ligne => {
                if (ligne.dataset.equipe === checkbox.value) {
                    ligne.style.display = checkbox.checked ? 'table-row' : 'none'
                }
            })
        })
    }
</script>
